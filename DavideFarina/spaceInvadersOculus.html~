<!doctype html>
<html lang="en">
<head>
	<title>Hello World (Three.js)</title>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
  
</head>
<body>

	<script src="build/three.js"></script>
	<script src='build/THREEx.KeyboardState.js'></script>
 <script src="examples/js/controls/OrbitControls.js"></script>
		<script src="js/effects/OculusRiftEffect.js"></script>
    <script src="http://mrdoob.github.com/three.js/examples/fonts/helvetiker_regular.typeface.js"></script>


<script>

// standard global variables
var container, scene, camera, renderer, controls, keyboard;

var scoreObj;
var spaceship, lastShot = new Date();
var alienPosition = -60;
var aliensGoingRight = true;
var colors = [];
var score = 0;
var line4 = THREE.Line;
var cube;
var camerahelper;
var tempo = 0, lasttempo = 0;

var neverHit = true; 
var targetlist = [];
var pallottole = [];
var aliens = [];

init();

animate();


			
function init() 
{
    colors.push(new THREE.Color(0xff0000));
    colors.push(new THREE.Color(0xffff00));
    colors.push(new THREE.Color(0x00ff00));
    colors.push(new THREE.Color(0x0000ff));
    colors.push(new THREE.Color(0x00ffff));

      container = document.createElement('div');
	  document.body.appendChild(container);


	scene = new THREE.Scene();

	
	// camera attributes
	var VIEW_ANGLE = 60, ASPECT = window.innerWidth / window.innerHeight, NEAR = 0.1, FAR = 10000;
	// set up camera
	camera = new THREE.PerspectiveCamera(VIEW_ANGLE, ASPECT, NEAR, FAR);
	
	// add the camera to the scene
	scene.add(camera);
	// the camera defaults to position (0,0,0)
	// 	so pull it back (z = 400) and up (y = 100) and set the angle towards the scene origin
	camera.position.set(0,0,50);
	camera.lookAt(scene.position);	
    

   renderer = new THREE.WebGLRenderer();
		        renderer.setSize(window.innerWidth, window.innerHeight);
		        renderer.sortObjects = false;

	
	  container = document.createElement( 'div' );
    document.body.appendChild( container );
	

	container.appendChild( renderer.domElement );
	
	
	controls = new THREE.OrbitControls( camera, renderer.domElement );
	
	
	///////////
	// LIGHT //
    ///////////

	var ambientLight = new THREE.AmbientLight(0xb0b0b0);
	//scene.add(ambientLight);

	var pointLight = new THREE.PointLight(0x303030, 10, 80);
	pointLight.position.set(-10, 20, 20);
	scene.add(pointLight);

    ////////////
    // MODELS //
    ////////////

	var arcadeGeom = new THREE.CubeGeometry(60, 55, 2, 1, 1, 1);
	var arcadeMat = new THREE.MeshLambertMaterial({ color: 0x00bb00 });
	arcade = new THREE.Mesh(arcadeGeom, arcadeMat);
	arcade.position.z = -3;
	scene.add(arcade);

	arcadeGeom = new THREE.CubeGeometry(57, 3, 6, 1, 1, 1);
	arcade = new THREE.Mesh(arcadeGeom, arcadeMat);
	arcade.position.y = -27;
	scene.add(arcade);

	arcadeGeom = new THREE.CubeGeometry(57, 3, 6, 1, 1, 1);
	arcade = new THREE.Mesh(arcadeGeom, arcadeMat);
	arcade.position.y = 27;
	scene.add(arcade);

	arcadeGeom = new THREE.CubeGeometry(3, 57, 6, 1, 1, 1);
	arcade = new THREE.Mesh(arcadeGeom, arcadeMat);
	arcade.position.x = 30;
	scene.add(arcade);

	arcadeGeom = new THREE.CubeGeometry(3, 57, 6, 1, 1, 1);
	arcade = new THREE.Mesh(arcadeGeom, arcadeMat);
	arcade.position.x = -30;
	scene.add(arcade);

	spaceship = new THREE.Geometry();
	spaceship.vertices = [  // array of Vector3 giving vertex coordinates
            new THREE.Vector3(1, 0, 1),    // vertex number 0
            new THREE.Vector3(1, 0, -1),   // vertex number 1
            new THREE.Vector3(-1, 0, -1),  // vertex number 2
            new THREE.Vector3(-1, 0, 1),   // vertex number 3
            new THREE.Vector3(0, 3, 0)     // vertex number 4
	];

	spaceship.faces = [
            new THREE.Face4(3, 2, 1, 0),  // bottom face is a quad
            new THREE.Face3(3, 0, 4),     // remaining faces are triangles
            new THREE.Face3(0, 1, 4),
            new THREE.Face3(1, 2, 4),
            new THREE.Face3(2, 3, 4)
	];
	spaceship = new THREE.Mesh(spaceship, new THREE.MeshBasicMaterial({ color: 0xff0000 }));
	spaceship.position.set(0, -25, 0);
	scene.add(spaceship);

	for (var i = 0; i < 10; i++)
	    for (var j = 0; j < 5; j++) {
	        var alien = new THREE.CubeGeometry(2, 2, 2, 1, 1, 1);
	        var alienMat = new THREE.MeshLambertMaterial({ color: colors[j] });
	        alien = new THREE.Mesh(alien, alienMat);
	        alien.position.x = -18 + i * 4;
	        alien.position.y = 20 - j * 4;
	        aliens.push(alien);
	        scene.add(alien);
	    }

	keyboard = new THREEx.KeyboardState();


				renderer = new THREE.WebGLRenderer({alpha: true});
				renderer.setClearColor( 0xbfd1e5, 1 );
				renderer.setSize( window.innerWidth, window.innerHeight );

				// Here is the effect for the Oculus Rift
				// worldScale 100 means that 100 Units == 1m
				effect = new THREE.OculusRiftEffect( renderer, {worldScale: 100} );
				effect.setSize( window.innerWidth, window.innerHeight );
}

   function onWindowResize() {

		        camera.left = window.innerWidth / -2;
		        camera.right = window.innerWidth / 2;
		        camera.top = window.innerHeight / 2;
		        camera.bottom = window.innerHeight / -2;

		        camera.updateProjectionMatrix();
		        camerahelper.update();

		        renderer.setSize(window.innerWidth, window.innerHeight);

		    }

function animate() 
   {
    var newScore = score;
    if (keyboard.pressed("A"))
        spaceship.position.x -= 0.3;

   	if (keyboard.pressed("D")) 
   	    spaceship.position.x += 0.3;

   	if (keyboard.pressed("S"))
   	    spara();

   	if(pallottole.length != 0) {
   	    for (var i = 0; i < pallottole.length; i++) {
   	        pallottole[i].position.y += 0.3;
   	        var rayp = new THREE.Raycaster(pallottole[i].position, new THREE.Vector3(0, 1, 0));

   	        // create an array containing all objects in the scene with which the ray intersects
   	        var intersects2 = rayp.intersectObjects(scene.children);
            if(intersects2.length > 0)
                if ((intersects2[0].object.position.y - pallottole[i].position.y) < 1.5 && pallottole[i].neverHit) {
                    pallottole[i].neverHit = false;
                    scene.remove(pallottole[i]);
                    scene.remove(intersects2[0].object);
                    scene.remove(rayp);
                    score++;
                }
            else if (pallottole[i].position.y >= 25)
                scene.remove(pallottole[i]);
   	    }
   	}

   	if (aliensGoingRight && alienPosition == 60)
   	    aliensGoingRight = false;
   	if (!aliensGoingRight && alienPosition == -60)
   	    aliensGoingRight = true;
   	if (aliensGoingRight)
   	    alienPosition++;
   	else
   	    alienPosition--;
   	for (var i = 0; i < aliens.length; i++) {
   	    aliens[i].position.x += alienPosition * 0.005; 
   	}

   	if (spaceship.position.x < -25)
   	    spaceship.position.x = -25;
   	if (spaceship.position.x > 25)
   	    spaceship.position.x = 25;


   	//if (newScore != score) {
   	//    scene.remove(sceneObj);
   	//    var scoreGeometry = new THREE.TextGeometry("SCORE: " + score, { size: 2 });
   	//    var scoreMat = new THREE.MeshLambertMaterial({ color: 0xffff00 });
   	//    var scoreObj = new THREE.Mesh(scoreGeometry, scoreMat);
   	//    scoreObj.position.set(-27, 23, -51);
   	//    scene.add(scoreObj);
   	//}


   requestAnimationFrame( animate );
	render();		
	
}



function render() 
{	
	renderer.render( scene, camera );
}


function spara() {
    var now = new Date();
    if ((now.valueOf() - lastShot.valueOf()) > 200) {
        lastShot = now;
        var pallGeometry = new THREE.CubeGeometry(0.2, 1, 0.2, 1, 1, 1);
        var pallMaterial = new THREE.MeshBasicMaterial({ color: 0x0000ff });
        var pallottola = new THREE.Mesh(pallGeometry, pallMaterial);
        pallottola.position.set(spaceship.position.x, spaceship.position.y + 3, spaceship.position.z);
        pallottola.neverHit = true;
        pallottole.push(pallottola);
        scene.add(pallottola);
    }
  }
</script>

</body>
</html>
