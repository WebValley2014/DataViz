<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - effects - oculus rift</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<style>
			body {
				color: rgb(168, 148, 0);
				font-family:Monospace;
				font-size:13px;
				text-align:center;

				background-color: #000000;
				margin: 0px;
				overflow: hidden;
			}

			#info {
				position: absolute;
				top: 0px; width: 100%;
				padding: 5px;
			}

			a {

				color: #a06851;
			}

			#oldie {
				background:rgb(100,0,0) !important;
				color:#fff !important;
				margin-top:10em !important;
			}
			#oldie a { color:#fff }

		</style>
	</head>
	<body>

		<div id="container"><br /><br /><br /><br /><br />Generating world...</div>
		<div id="info"><a href="http://threejs.org" target="_blank">three.js</a> - effects - oculus rift. featuring <a href="http://painterlypack.net/" target="_blank">painterly pack</a><br />(left click: forward, right click: backward, h: hide text)</div>

		<script src="build/three.min.js"></script>

		<script src="js/controls/FirstPersonControls.js"></script>
		<script src='build/THREEx.KeyboardState.js'></script>
		<script src="js/ImprovedNoise.js"></script>
		<script src="js/Detector.js"></script>
		<script src="js/effects/OculusRiftEffect.js"></script>
		<script src="js/libs/stats.min.js"></script>

		<script>

			if ( ! Detector.webgl ) {

				Detector.addGetWebGLMessage();
				document.getElementById( 'container' ).innerHTML = "";

			}

			var container, stats;

			var camera, controls, scene, renderer;

			var mesh;

			var sphereRadius = 1;
			var objects = [];
			var sphereMat = new THREE.MeshLambertMaterial({color: 0xff0000});

			var worldWidth = 128, worldDepth = 128,
			worldHalfWidth = worldWidth / 2, worldHalfDepth = worldDepth / 2,
			data = generateHeight( worldWidth, worldDepth );

			var clock = new THREE.Clock();

			init();
			animate();

			function init() {

				container = document.getElementById( 'container' );

				camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 0, 20000 );
				camera.position.set = new THREE.Vector3(0, 0, 0);
				controls = new THREE.FirstPersonControls( camera );

				controls.movementSpeed = 2;
				controls.lookSpeed = 0.1; //0.050
				controls.lookVertical = true;

				scene = new THREE.Scene();

				// sides

				var matrix = new THREE.Matrix4();

				var pxGeometry = new THREE.PlaneGeometry( 100, 100 );
				pxGeometry.faceVertexUvs[ 0 ][ 0 ][ 0 ].y = 0.5;
				pxGeometry.faceVertexUvs[ 0 ][ 0 ][ 2 ].y = 0.5;
				pxGeometry.faceVertexUvs[ 0 ][ 1 ][ 2 ].y = 0.5;
				pxGeometry.applyMatrix( matrix.makeRotationY( Math.PI / 2 ) );
				pxGeometry.applyMatrix( matrix.makeTranslation( 50, 0, 0 ) );

				var nxGeometry = new THREE.PlaneGeometry( 100, 100 );
				nxGeometry.faceVertexUvs[ 0 ][ 0 ][ 0 ].y = 0.5;
				nxGeometry.faceVertexUvs[ 0 ][ 0 ][ 2 ].y = 0.5;
				nxGeometry.faceVertexUvs[ 0 ][ 1 ][ 2 ].y = 0.5;
				nxGeometry.applyMatrix( matrix.makeRotationY( - Math.PI / 2 ) );
				nxGeometry.applyMatrix( matrix.makeTranslation( - 50, 0, 0 ) );

				var pyGeometry = new THREE.PlaneGeometry( 100, 100 );
				pyGeometry.faceVertexUvs[ 0 ][ 0 ][ 1 ].y = 0.5;
				pyGeometry.faceVertexUvs[ 0 ][ 1 ][ 0 ].y = 0.5;
				pyGeometry.faceVertexUvs[ 0 ][ 1 ][ 1 ].y = 0.5;
				pyGeometry.applyMatrix( matrix.makeRotationX( - Math.PI / 2 ) );
				pyGeometry.applyMatrix( matrix.makeTranslation( 0, 50, 0 ) );

				var pzGeometry = new THREE.PlaneGeometry( 100, 100 );
				pzGeometry.faceVertexUvs[ 0 ][ 0 ][ 0 ].y = 0.5;
				pzGeometry.faceVertexUvs[ 0 ][ 0 ][ 2 ].y = 0.5;
				pzGeometry.faceVertexUvs[ 0 ][ 1 ][ 2 ].y = 0.5;
				pzGeometry.applyMatrix( matrix.makeTranslation( 0, 0, 50 ) );

				var nzGeometry = new THREE.PlaneGeometry( 100, 100 );
				nzGeometry.faceVertexUvs[ 0 ][ 0 ][ 0 ].y = 0.5;
				nzGeometry.faceVertexUvs[ 0 ][ 0 ][ 2 ].y = 0.5;
				nzGeometry.faceVertexUvs[ 0 ][ 1 ][ 2 ].y = 0.5;
				nzGeometry.applyMatrix( matrix.makeRotationY( Math.PI ) );
				nzGeometry.applyMatrix( matrix.makeTranslation( 0, 0, -50 ) );

				//My Code
				cubeGeom = new THREE.CubeGeometry(1,1,1,1,1,1);
				cubeMat = new THREE.MeshLambertMaterial({color: 0xff0000});
				cube = new THREE.Mesh(cubeGeom, cubeMat);
				cube.position.set(-5, 0, 0);
				scene.add(cube);
				camera.lookAt(cube);

				keyboard = new THREEx.KeyboardState();
				CreateGraph();
	
				//End My Code

				var ambientLight = new THREE.AmbientLight( 0x222222 );
				scene.add( ambientLight );

				var directionalLight = new THREE.DirectionalLight( 0xffffff, 2 );
				directionalLight.position.set(-1, 0.5, 0.5 ).normalize();
				directionalLight.castShadow = true;
				scene.add( directionalLight );

				renderer = new THREE.WebGLRenderer();
				renderer.setClearColor( 0xbfd1e5, 1 );
				renderer.setSize( window.innerWidth, window.innerHeight );

				// Here is the effect for the Oculus Rift
				// worldScale 100 means that 100 Units == 1m
				//effect = new THREE.OculusRiftEffect( renderer, {worldScale: 100} );
				//effect.setSize( window.innerWidth, window.innerHeight );

				container.innerHTML = "";

				container.appendChild( renderer.domElement );

				stats = new Stats();
				stats.domElement.style.position = 'absolute';
				stats.domElement.style.top = '0px';
				container.appendChild( stats.domElement );

				// GUI
				window.addEventListener( 'resize', onWindowResize, false );
				document.addEventListener( 'keydown', keyPressed, false );

				guiVisible = true;

			}

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				//effect.setSize( window.innerWidth, window.innerHeight );

				//controls.handleResize();

			}

			function keyPressed (event) {
				if (event.keyCode === 72) { // H
					guiVisible = !guiVisible;
					document.getElementById('info').style.display = guiVisible ? "block" : "none";
					stats.domElement.style.display = guiVisible ? "block" : "none";
				}
			}

			function generateHeight( width, height ) {

				var data = [], perlin = new ImprovedNoise(),
				size = width * height, quality = 2, z = Math.random() * 100;

				for ( var j = 0; j < 4; j ++ ) {

					if ( j == 0 ) for ( var i = 0; i < size; i ++ ) data[ i ] = 0;

					for ( var i = 0; i < size; i ++ ) {

						var x = i % width, y = ( i / width ) | 0;
						data[ i ] += perlin.noise( x / quality, y / quality, z ) * quality;


					}

					quality *= 4

				}

				return data;

			}

			function getY( x, z ) {

				return ( data[ x + z * worldWidth ] * 0.2 ) | 0;

			}

			//

			function animate() {
			    if (keyboard.pressed("P")) {
        			sphereRadius += 0.01; 
					UpdateGraph(); }
			    if (keyboard.pressed("O")) {
        			sphereRadius -= 0.01; 
					UpdateGraph(); }
				requestAnimationFrame( animate );

				render();
				stats.update();

			}

			function render() {

				controls.update( clock.getDelta() );
				renderer.render( scene, camera );

			}

			function CreateGraph() {
				for(var i = 0; i < objects.length; i++)
					scene.remove(objects[i]);
				objects = [];
				for(var i = 0; i < 10; i++) {
					var mat;
					if(i%2 == 0)
						mat = new THREE.MeshLambertMaterial({color: 0xff0000});
					else
						mat = new THREE.MeshLambertMaterial({color: 0x00ff00});
					var sphereGeom = new THREE.SphereGeometry(sphereRadius, 20, 20);
					objects[i] = new THREE.Mesh(sphereGeom, mat);
					if(i%2 == 0)
						objects[i].position.z = -20;
					else
						objects[i].position.z = 16;
					if(i <= 1) {
						//objects[i].position.z = 0 + i*3;
						objects[i].position.y = 5; }
					else 
						objects[i].position.z = -18 + i*3;
					objects.push(objects[i]);
					objects[i].scale.x = sphereRadius;
					objects[i].scale.y = sphereRadius;
					objects[i].scale.z = sphereRadius;
				}
				
				for(var i = 0; i < objects.length; i++) {
					scene.add(objects[i]);				
				}

				for(var i = 0; i < objects.length; i++) {
					if(i%2 == 0)
						drawEdge(objects[0], objects[i]);
					else
						drawEdge(objects[1], objects[i]);
				}
			}

			function UpdateGraph(){
				for(var i = 0; i < objects.length; i++) {
					//var sphereGeom = new THREE.SphereGeometry(sphereRadius, 20, 20);
					objects[i].scale.x = sphereRadius;
					objects[i].scale.y = sphereRadius;
					objects[i].scale.z = sphereRadius;
				}	
			}

			  function drawEdge(source, target) {
				  var lineGeom = new THREE.Geometry();
				  var lineMat = new THREE.LineBasicMaterial({ color: 0x444444, opacity: 1, linewidth: 2 });

				  lineGeom.vertices.push(source.position);
				  lineGeom.vertices.push(target.position);

				  line = new THREE.Line( lineGeom, lineMat, THREE.LinePieces );
				  line.scale.x = line.scale.y = line.scale.z =1;
				  line.originalScale = 10;

				  //geometries.push(tmp_geo);

				  scene.add( line );
			  }

		</script>

	</body>
</html>

